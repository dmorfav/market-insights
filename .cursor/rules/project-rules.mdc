---
alwaysApply: true
---
# üìê Contracto de Reutilizabilidad ‚Äî Chart Components

> Estos lineamientos garantizan que **cualquier** componente de gr√°fica pueda migrarse a un micro-frontend, empaquetarse como librer√≠a NPM o incrustarse en proyectos externos sin cambios de c√≥digo.

| # | Regla                                                                                                                                                           | Beneficio clave |
|---|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|
| **R-1** | **Autonom√≠a total**: el componente **no** importa servicios de datos (Finnhub, facades, etc.). Solo recibe `@Input()`/`input()` con **datos inmutables** y opcionalmente `config`. | Cambiar la fuente de datos no obliga a tocar el componente. |
| **R-2** | **Sin efectos secundarios**: no escribe en `localStorage`, no hace `fetch`. Cualquier salida se expone v√≠a `@Output()`/signal (`chartReady`, `pointClick`). | Encapsula side-effects en capas superiores ‚áí SRP cumplido. |
| **R-3** | **ChangeDetectionStrategy.OnPush + Signals Inputs**. Transformaciones costosas se realizan en `computed()` o *pure pipes*. | Rendimiento √≥ptimo; listo para lazy-loading y host variados. |
| **R-4** | **Theming desacoplado**: colores obtenidos de CSS vars (`var(--color-primary)`) o `config.palette`. Contenido visual aislado mediante Shadow DOM o estilos scoped. | Permite integrarse en m√∫ltiples design systems / temas. |
| **R-5** | **API estable y versionada**: expone `interface ChartConfig` anotado con `/** @public */`. Nuevos campos solo se a√±aden (no romper). | Facilita el versionado sem√°ntico al publicar en NPM. |
| **R-6** | **Opciones globales v√≠a InjectionToken** (`@Optional()`), nunca singletons internos. | El host controla localizaci√≥n, formato num√©rico, etc. |
| **R-7** | **Dependencias m√≠nimas**: √∫nicamente `echarts` y `@angular/core`. Cualquier helper heavy ‚â• 10 kB va como *peerDependency*. | Bundles m√°s peque√±os y sin duplicados en MFEs. |
| **R-8** | **Internacionalizaci√≥n y A11y**: textos y tooltips por `config.i18n`; fallback en ingl√©s. A√±adir `role="img"` y descripciones ARIA. | Cumple WCAG & apps multiling√ºes. |
| **R-9** | **Testing en aislamiento**: cada componente tiene su `.spec.ts` que *mockea* `echarts.init` y realiza snapshots de `EChartsOption` + DOM. | Evita regresiones al mover el componente a otro workspace. |
| **R-10** | **Empaquetado agn√≥stico**: reside en `projects/tradewise-charts`, configurado con `ng-packagr`, `sideEffects: false`, tipados incluidos. | Listo para publicarse o consumirse v√≠a Module Federation. |
| **R-11** | **Responsabilidad √∫nica visual**: si un widget necesita varias series (p. ej. velas + volumen) se crea un *widget* contenedor, no se hincha el primitivo. | Mantiene API simple y re-utilizable. |
| **R-12** | **Documentaci√≥n viva**: cada componente incluye Storybook stories: default, dark theme, datasets grandes, estado *loading*. | Acelera adopci√≥n por otros equipos y asegura ejemplos actualizados. |

**R-13** ¬∑ **Eventos como `output()` + Signal**  
Cada componente de gr√°fica que permita interacci√≥n del usuario (click, brush, selecci√≥n) **debe exponer** un
```
selected = output<ChartSelectEvent>();
```
donde `ChartSelectEvent` representa el dato crudo emitido por ECharts (o tu propio DTO).  
Este patr√≥n conserva el aislamiento (el componente sigue sin saber qui√©n lo consume) y evita acoplarte al
`EventEmitter` cl√°sico; las apps host podr√°n convertir la se√±al a `Observable` con `toObservable()` o
vincularla directamente a otra se√±al.

---

## üìù Plantilla m√≠nima de componente

### üìù Plantilla actualizada

```ts
@Component({
  selector: 'tw-line-chart',
  standalone: true,
  template: '<div class="echart" #host></div>',
  changeDetection: ChangeDetectionStrategy.OnPush,
  encapsulation: ViewEncapsulation.ShadowDom,
})
export class LineChartComponent implements AfterRender {
  /* ‚ñº inputs como se√±ales --------------------------------------- */
  data   = input<readonly Point[]>();
  config = input<ChartConfig>();

  /* ‚ñº output como se√±al ----------------------------------------- */
  readonly selected = output<ChartSelectEvent>();

  private chart!: ECharts;

  afterRender() {
    effect(() => {
      const option = buildLineOption(this.data(), this.config());
      if (this.chart) {
        this.chart.setOption(option, { notMerge: true });
      } else {
        this.chart = echarts.init(this.host.nativeElement, undefined, { useUtc: true });
        this.chart.setOption(option);

        /* Puentea el click de ECharts ‚Üí output() */
        this.chart.on('click', (params) => {
          this.selected.emit({
            x: params.value[0],
            y: params.value[1],
            raw: params
          });
        });
      }
    });
  }
}

/* DTO para mantener tipado y Clean Code */
export interface ChartSelectEvent {
  x: number | string | Date;
  y: number;
  raw: unknown;       // params completos del handler por si se necesitan
}
```

  ‚úîÔ∏è Checklist antes de ‚ÄúDone‚Äù
	‚Ä¢	OnPush + signals verificados en pruebas.
	‚Ä¢	Storybook actualizado.
	‚Ä¢	.spec.ts con snapshot de EChartsOption.
	‚Ä¢	Cumple R-1 ‚Ä¶ R-12 sin excepciones.